create-migration name:
    sqlx migrate add {{name}}

# assumes db container is running
run-migrations:
    sqlx migrate run

take-nap:
    sleep 2

db-up:
    docker run --rm --name kanban-postgres --tmpfs=/pgtmpfs --env PGDATA=/pgtmpfs --env POSTGRES_HOST_AUTH_METHOD=trust --publish 5432:5432 --detach postgres:13

start-dev: db-up take-nap run-migrations

db-down:
    docker stop kanban-postgres

pgbench-init:
    docker exec -it kanban-postgres pgbench --username postgres --initialize

pgbench-reads:
    docker exec -it kanban-postgres pgbench --username postgres --client 8 --jobs 8 --transactions 1000 --select-only

pgbench-mixed:
    docker exec -it kanban-postgres pgbench --username postgres --client 8 --jobs 8 --transactions 1000

stop-dev: db-down

restart-dev: stop-dev start-dev

# connect psql to db container if it's running
psql:
    docker exec -it kanban-postgres psql -U postgres

# connect bash to db container if it's running
bash:
    docker exec -it kanban-postgres bash


build-native:
    RUSTFLAGS="-C target-cpu=native" cargo build --release

run-native:
    RUSTFLAGS="-C target-cpu=native" cargo run --release


get-index:
    curl --include http://localhost:8000/

get-boards:
    curl --header "Authorization: Bearer LET_ME_IN" --include http://localhost:8000/api/boards

get-board-summary:
    curl --header "Authorization: Bearer LET_ME_IN" --include http://localhost:8000/api/boards/1/summary

post-board:
    curl --header "Authorization: Bearer LET_ME_IN" --header "Content-Type: application/json" --request POST --data '{"name": "Created Test Board from CURL"}' --include http://localhost:8000/api/boards

delete-board board-id='1000':
    curl --header "Authorization: Bearer LET_ME_IN" --request DELETE --include http://localhost:8000/api/boards/{{board-id}}

get-cards board-id='1':
    curl --header "Authorization: Bearer LET_ME_IN" --include http://localhost:8000/api/boards/{{board-id}}/cards

post-card board-id='1':
    curl --header "Authorization: Bearer LET_ME_IN" --header "Content-Type: application/json" --request POST --data '{"boardId": 1, "description": "Created Test Card from CURL"}' --include http://localhost:8000/api/cards

patch-card card-id='1':
    curl --header "Authorization: Bearer LET_ME_IN" --header "Content-Type: application/json" --request PATCH --data '{"description": "Updated description from CURL", "status": "doing"}' --include http://localhost:8000/api/cards/{{card-id}}

delete-card card-id='1000':
    curl --header "Authorization: Bearer LET_ME_IN" --request DELETE --include http://localhost:8000/api/cards/{{card-id}}

test-api: get-index get-boards get-cards get-board-summary post-board post-card patch-card delete-board delete-card
